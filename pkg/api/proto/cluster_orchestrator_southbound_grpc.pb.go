// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: cluster_orchestrator_southbound.proto

package cluster_orchestrator_southbound

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterOrchestratorSouthbound_RegisterCluster_FullMethodName                   = "/cluster_orchestrator_southbound_proto.ClusterOrchestratorSouthbound/RegisterCluster"
	ClusterOrchestratorSouthbound_UpdateClusterStatus_FullMethodName               = "/cluster_orchestrator_southbound_proto.ClusterOrchestratorSouthbound/UpdateClusterStatus"
	ClusterOrchestratorSouthbound_GetClusterNumByTemplateIdentifier_FullMethodName = "/cluster_orchestrator_southbound_proto.ClusterOrchestratorSouthbound/GetClusterNumByTemplateIdentifier"
)

// ClusterOrchestratorSouthboundClient is the client API for ClusterOrchestratorSouthbound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterOrchestratorSouthboundClient interface {
	// RegisterCluster is called from Edge Node to receive LPKE installation script
	RegisterCluster(ctx context.Context, in *RegisterClusterRequest, opts ...grpc.CallOption) (*RegisterClusterResponse, error)
	// UpdateClusterStatus is called from Edge Cluster to set the status cluster deployment
	UpdateClusterStatus(ctx context.Context, in *UpdateClusterStatusRequest, opts ...grpc.CallOption) (*UpdateClusterStatusResponse, error)
	// GetClusterNumByTemplateIdentifier is called from CTM service
	GetClusterNumByTemplateIdentifier(ctx context.Context, in *GetClusterNumByTemplateIdentifierRequest, opts ...grpc.CallOption) (*GetClusterNumByTemplateIdentifierResponse, error)
}

type clusterOrchestratorSouthboundClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterOrchestratorSouthboundClient(cc grpc.ClientConnInterface) ClusterOrchestratorSouthboundClient {
	return &clusterOrchestratorSouthboundClient{cc}
}

func (c *clusterOrchestratorSouthboundClient) RegisterCluster(ctx context.Context, in *RegisterClusterRequest, opts ...grpc.CallOption) (*RegisterClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterClusterResponse)
	err := c.cc.Invoke(ctx, ClusterOrchestratorSouthbound_RegisterCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterOrchestratorSouthboundClient) UpdateClusterStatus(ctx context.Context, in *UpdateClusterStatusRequest, opts ...grpc.CallOption) (*UpdateClusterStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClusterStatusResponse)
	err := c.cc.Invoke(ctx, ClusterOrchestratorSouthbound_UpdateClusterStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterOrchestratorSouthboundClient) GetClusterNumByTemplateIdentifier(ctx context.Context, in *GetClusterNumByTemplateIdentifierRequest, opts ...grpc.CallOption) (*GetClusterNumByTemplateIdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterNumByTemplateIdentifierResponse)
	err := c.cc.Invoke(ctx, ClusterOrchestratorSouthbound_GetClusterNumByTemplateIdentifier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterOrchestratorSouthboundServer is the server API for ClusterOrchestratorSouthbound service.
// All implementations must embed UnimplementedClusterOrchestratorSouthboundServer
// for forward compatibility.
type ClusterOrchestratorSouthboundServer interface {
	// RegisterCluster is called from Edge Node to receive LPKE installation script
	RegisterCluster(context.Context, *RegisterClusterRequest) (*RegisterClusterResponse, error)
	// UpdateClusterStatus is called from Edge Cluster to set the status cluster deployment
	UpdateClusterStatus(context.Context, *UpdateClusterStatusRequest) (*UpdateClusterStatusResponse, error)
	// GetClusterNumByTemplateIdentifier is called from CTM service
	GetClusterNumByTemplateIdentifier(context.Context, *GetClusterNumByTemplateIdentifierRequest) (*GetClusterNumByTemplateIdentifierResponse, error)
	mustEmbedUnimplementedClusterOrchestratorSouthboundServer()
}

// UnimplementedClusterOrchestratorSouthboundServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterOrchestratorSouthboundServer struct{}

func (UnimplementedClusterOrchestratorSouthboundServer) RegisterCluster(context.Context, *RegisterClusterRequest) (*RegisterClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCluster not implemented")
}
func (UnimplementedClusterOrchestratorSouthboundServer) UpdateClusterStatus(context.Context, *UpdateClusterStatusRequest) (*UpdateClusterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterStatus not implemented")
}
func (UnimplementedClusterOrchestratorSouthboundServer) GetClusterNumByTemplateIdentifier(context.Context, *GetClusterNumByTemplateIdentifierRequest) (*GetClusterNumByTemplateIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterNumByTemplateIdentifier not implemented")
}
func (UnimplementedClusterOrchestratorSouthboundServer) mustEmbedUnimplementedClusterOrchestratorSouthboundServer() {
}
func (UnimplementedClusterOrchestratorSouthboundServer) testEmbeddedByValue() {}

// UnsafeClusterOrchestratorSouthboundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterOrchestratorSouthboundServer will
// result in compilation errors.
type UnsafeClusterOrchestratorSouthboundServer interface {
	mustEmbedUnimplementedClusterOrchestratorSouthboundServer()
}

func RegisterClusterOrchestratorSouthboundServer(s grpc.ServiceRegistrar, srv ClusterOrchestratorSouthboundServer) {
	// If the following call pancis, it indicates UnimplementedClusterOrchestratorSouthboundServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterOrchestratorSouthbound_ServiceDesc, srv)
}

func _ClusterOrchestratorSouthbound_RegisterCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterOrchestratorSouthboundServer).RegisterCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterOrchestratorSouthbound_RegisterCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterOrchestratorSouthboundServer).RegisterCluster(ctx, req.(*RegisterClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterOrchestratorSouthbound_UpdateClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterOrchestratorSouthboundServer).UpdateClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterOrchestratorSouthbound_UpdateClusterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterOrchestratorSouthboundServer).UpdateClusterStatus(ctx, req.(*UpdateClusterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterOrchestratorSouthbound_GetClusterNumByTemplateIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterNumByTemplateIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterOrchestratorSouthboundServer).GetClusterNumByTemplateIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterOrchestratorSouthbound_GetClusterNumByTemplateIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterOrchestratorSouthboundServer).GetClusterNumByTemplateIdentifier(ctx, req.(*GetClusterNumByTemplateIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterOrchestratorSouthbound_ServiceDesc is the grpc.ServiceDesc for ClusterOrchestratorSouthbound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterOrchestratorSouthbound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster_orchestrator_southbound_proto.ClusterOrchestratorSouthbound",
	HandlerType: (*ClusterOrchestratorSouthboundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCluster",
			Handler:    _ClusterOrchestratorSouthbound_RegisterCluster_Handler,
		},
		{
			MethodName: "UpdateClusterStatus",
			Handler:    _ClusterOrchestratorSouthbound_UpdateClusterStatus_Handler,
		},
		{
			MethodName: "GetClusterNumByTemplateIdentifier",
			Handler:    _ClusterOrchestratorSouthbound_GetClusterNumByTemplateIdentifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster_orchestrator_southbound.proto",
}
