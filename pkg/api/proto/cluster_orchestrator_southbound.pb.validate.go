// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cluster_orchestrator_southbound.proto

package cluster_orchestrator_southbound

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterClusterRequestMultiError, or nil if none found.
func (m *RegisterClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RegisterClusterRequest_NodeGuid_Pattern.MatchString(m.GetNodeGuid()) {
		err := RegisterClusterRequestValidationError{
			field:  "NodeGuid",
			reason: "value does not match regex pattern \"^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterClusterRequestMultiError(errors)
	}

	return nil
}

// RegisterClusterRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterClusterRequestMultiError) AllErrors() []error { return m }

// RegisterClusterRequestValidationError is the validation error returned by
// RegisterClusterRequest.Validate if the designated constraints aren't met.
type RegisterClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterClusterRequestValidationError) ErrorName() string {
	return "RegisterClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterClusterRequestValidationError{}

var _RegisterClusterRequest_NodeGuid_Pattern = regexp.MustCompile("^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$")

// Validate checks the field values on RegisterClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterClusterResponseMultiError, or nil if none found.
func (m *RegisterClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstallCmd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterClusterResponseValidationError{
					field:  "InstallCmd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterClusterResponseValidationError{
					field:  "InstallCmd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstallCmd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterClusterResponseValidationError{
				field:  "InstallCmd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUninstallCmd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterClusterResponseValidationError{
					field:  "UninstallCmd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterClusterResponseValidationError{
					field:  "UninstallCmd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUninstallCmd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterClusterResponseValidationError{
				field:  "UninstallCmd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Res

	if len(errors) > 0 {
		return RegisterClusterResponseMultiError(errors)
	}

	return nil
}

// RegisterClusterResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterClusterResponseMultiError) AllErrors() []error { return m }

// RegisterClusterResponseValidationError is the validation error returned by
// RegisterClusterResponse.Validate if the designated constraints aren't met.
type RegisterClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterClusterResponseValidationError) ErrorName() string {
	return "RegisterClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterClusterResponseValidationError{}

// Validate checks the field values on ShellScriptCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShellScriptCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShellScriptCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShellScriptCommandMultiError, or nil if none found.
func (m *ShellScriptCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ShellScriptCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Command

	if len(errors) > 0 {
		return ShellScriptCommandMultiError(errors)
	}

	return nil
}

// ShellScriptCommandMultiError is an error wrapping multiple validation errors
// returned by ShellScriptCommand.ValidateAll() if the designated constraints
// aren't met.
type ShellScriptCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShellScriptCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShellScriptCommandMultiError) AllErrors() []error { return m }

// ShellScriptCommandValidationError is the validation error returned by
// ShellScriptCommand.Validate if the designated constraints aren't met.
type ShellScriptCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShellScriptCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShellScriptCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShellScriptCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShellScriptCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShellScriptCommandValidationError) ErrorName() string {
	return "ShellScriptCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ShellScriptCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShellScriptCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShellScriptCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShellScriptCommandValidationError{}

// Validate checks the field values on UpdateClusterStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClusterStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClusterStatusRequestMultiError, or nil if none found.
func (m *UpdateClusterStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if !_UpdateClusterStatusRequest_NodeGuid_Pattern.MatchString(m.GetNodeGuid()) {
		err := UpdateClusterStatusRequestValidationError{
			field:  "NodeGuid",
			reason: "value does not match regex pattern \"^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateClusterStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateClusterStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateClusterStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateClusterStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterStatusRequestMultiError) AllErrors() []error { return m }

// UpdateClusterStatusRequestValidationError is the validation error returned
// by UpdateClusterStatusRequest.Validate if the designated constraints aren't met.
type UpdateClusterStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterStatusRequestValidationError) ErrorName() string {
	return "UpdateClusterStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterStatusRequestValidationError{}

var _UpdateClusterStatusRequest_NodeGuid_Pattern = regexp.MustCompile("^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$")

// Validate checks the field values on UpdateClusterStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClusterStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClusterStatusResponseMultiError, or nil if none found.
func (m *UpdateClusterStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionRequest

	if len(errors) > 0 {
		return UpdateClusterStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateClusterStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateClusterStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateClusterStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterStatusResponseMultiError) AllErrors() []error { return m }

// UpdateClusterStatusResponseValidationError is the validation error returned
// by UpdateClusterStatusResponse.Validate if the designated constraints
// aren't met.
type UpdateClusterStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterStatusResponseValidationError) ErrorName() string {
	return "UpdateClusterStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterStatusResponseValidationError{}

// Validate checks the field values on GetClusterNumByTemplateIdentifierRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetClusterNumByTemplateIdentifierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetClusterNumByTemplateIdentifierRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetClusterNumByTemplateIdentifierRequestMultiError, or nil if none found.
func (m *GetClusterNumByTemplateIdentifierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterNumByTemplateIdentifierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateIdentifier

	if len(errors) > 0 {
		return GetClusterNumByTemplateIdentifierRequestMultiError(errors)
	}

	return nil
}

// GetClusterNumByTemplateIdentifierRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetClusterNumByTemplateIdentifierRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterNumByTemplateIdentifierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterNumByTemplateIdentifierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterNumByTemplateIdentifierRequestMultiError) AllErrors() []error { return m }

// GetClusterNumByTemplateIdentifierRequestValidationError is the validation
// error returned by GetClusterNumByTemplateIdentifierRequest.Validate if the
// designated constraints aren't met.
type GetClusterNumByTemplateIdentifierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterNumByTemplateIdentifierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterNumByTemplateIdentifierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterNumByTemplateIdentifierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterNumByTemplateIdentifierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterNumByTemplateIdentifierRequestValidationError) ErrorName() string {
	return "GetClusterNumByTemplateIdentifierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterNumByTemplateIdentifierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterNumByTemplateIdentifierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterNumByTemplateIdentifierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterNumByTemplateIdentifierRequestValidationError{}

// Validate checks the field values on
// GetClusterNumByTemplateIdentifierResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetClusterNumByTemplateIdentifierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetClusterNumByTemplateIdentifierResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetClusterNumByTemplateIdentifierResponseMultiError, or nil if none found.
func (m *GetClusterNumByTemplateIdentifierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterNumByTemplateIdentifierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Res

	// no validation rules for ClusterNum

	if len(errors) > 0 {
		return GetClusterNumByTemplateIdentifierResponseMultiError(errors)
	}

	return nil
}

// GetClusterNumByTemplateIdentifierResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetClusterNumByTemplateIdentifierResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterNumByTemplateIdentifierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterNumByTemplateIdentifierResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterNumByTemplateIdentifierResponseMultiError) AllErrors() []error { return m }

// GetClusterNumByTemplateIdentifierResponseValidationError is the validation
// error returned by GetClusterNumByTemplateIdentifierResponse.Validate if the
// designated constraints aren't met.
type GetClusterNumByTemplateIdentifierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterNumByTemplateIdentifierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterNumByTemplateIdentifierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterNumByTemplateIdentifierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterNumByTemplateIdentifierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterNumByTemplateIdentifierResponseValidationError) ErrorName() string {
	return "GetClusterNumByTemplateIdentifierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterNumByTemplateIdentifierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterNumByTemplateIdentifierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterNumByTemplateIdentifierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterNumByTemplateIdentifierResponseValidationError{}
