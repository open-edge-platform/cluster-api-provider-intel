// Code generated by mockery v2.53.4. DO NOT EDIT.

package m_southboundhandler

import (
	context "context"

	cluster_orchestrator_southbound "github.com/open-edge-platform/cluster-api-provider-intel/pkg/api/proto"

	mock "github.com/stretchr/testify/mock"
)

// MockSouthboundHandler is an autogenerated mock type for the SouthboundHandler type
type MockSouthboundHandler struct {
	mock.Mock
}

type MockSouthboundHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSouthboundHandler) EXPECT() *MockSouthboundHandler_Expecter {
	return &MockSouthboundHandler_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: ctx, nodeGUID
func (_m *MockSouthboundHandler) Register(ctx context.Context, nodeGUID string) (*cluster_orchestrator_southbound.ShellScriptCommand, *cluster_orchestrator_southbound.ShellScriptCommand, cluster_orchestrator_southbound.RegisterClusterResponse_Result, error) {
	ret := _m.Called(ctx, nodeGUID)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *cluster_orchestrator_southbound.ShellScriptCommand
	var r1 *cluster_orchestrator_southbound.ShellScriptCommand
	var r2 cluster_orchestrator_southbound.RegisterClusterResponse_Result
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cluster_orchestrator_southbound.ShellScriptCommand, *cluster_orchestrator_southbound.ShellScriptCommand, cluster_orchestrator_southbound.RegisterClusterResponse_Result, error)); ok {
		return rf(ctx, nodeGUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cluster_orchestrator_southbound.ShellScriptCommand); ok {
		r0 = rf(ctx, nodeGUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster_orchestrator_southbound.ShellScriptCommand)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *cluster_orchestrator_southbound.ShellScriptCommand); ok {
		r1 = rf(ctx, nodeGUID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cluster_orchestrator_southbound.ShellScriptCommand)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) cluster_orchestrator_southbound.RegisterClusterResponse_Result); ok {
		r2 = rf(ctx, nodeGUID)
	} else {
		r2 = ret.Get(2).(cluster_orchestrator_southbound.RegisterClusterResponse_Result)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = rf(ctx, nodeGUID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockSouthboundHandler_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockSouthboundHandler_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeGUID string
func (_e *MockSouthboundHandler_Expecter) Register(ctx interface{}, nodeGUID interface{}) *MockSouthboundHandler_Register_Call {
	return &MockSouthboundHandler_Register_Call{Call: _e.mock.On("Register", ctx, nodeGUID)}
}

func (_c *MockSouthboundHandler_Register_Call) Run(run func(ctx context.Context, nodeGUID string)) *MockSouthboundHandler_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSouthboundHandler_Register_Call) Return(_a0 *cluster_orchestrator_southbound.ShellScriptCommand, _a1 *cluster_orchestrator_southbound.ShellScriptCommand, _a2 cluster_orchestrator_southbound.RegisterClusterResponse_Result, _a3 error) *MockSouthboundHandler_Register_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockSouthboundHandler_Register_Call) RunAndReturn(run func(context.Context, string) (*cluster_orchestrator_southbound.ShellScriptCommand, *cluster_orchestrator_southbound.ShellScriptCommand, cluster_orchestrator_southbound.RegisterClusterResponse_Result, error)) *MockSouthboundHandler_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, nodeGUID, status
func (_m *MockSouthboundHandler) UpdateStatus(ctx context.Context, nodeGUID string, status cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code) (cluster_orchestrator_southbound.UpdateClusterStatusResponse_ActionRequest, error) {
	ret := _m.Called(ctx, nodeGUID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 cluster_orchestrator_southbound.UpdateClusterStatusResponse_ActionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code) (cluster_orchestrator_southbound.UpdateClusterStatusResponse_ActionRequest, error)); ok {
		return rf(ctx, nodeGUID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code) cluster_orchestrator_southbound.UpdateClusterStatusResponse_ActionRequest); ok {
		r0 = rf(ctx, nodeGUID, status)
	} else {
		r0 = ret.Get(0).(cluster_orchestrator_southbound.UpdateClusterStatusResponse_ActionRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code) error); ok {
		r1 = rf(ctx, nodeGUID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSouthboundHandler_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockSouthboundHandler_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeGUID string
//   - status cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code
func (_e *MockSouthboundHandler_Expecter) UpdateStatus(ctx interface{}, nodeGUID interface{}, status interface{}) *MockSouthboundHandler_UpdateStatus_Call {
	return &MockSouthboundHandler_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, nodeGUID, status)}
}

func (_c *MockSouthboundHandler_UpdateStatus_Call) Run(run func(ctx context.Context, nodeGUID string, status cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code)) *MockSouthboundHandler_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code))
	})
	return _c
}

func (_c *MockSouthboundHandler_UpdateStatus_Call) Return(_a0 cluster_orchestrator_southbound.UpdateClusterStatusResponse_ActionRequest, _a1 error) *MockSouthboundHandler_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSouthboundHandler_UpdateStatus_Call) RunAndReturn(run func(context.Context, string, cluster_orchestrator_southbound.UpdateClusterStatusRequest_Code) (cluster_orchestrator_southbound.UpdateClusterStatusResponse_ActionRequest, error)) *MockSouthboundHandler_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSouthboundHandler creates a new instance of MockSouthboundHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSouthboundHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSouthboundHandler {
	mock := &MockSouthboundHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
