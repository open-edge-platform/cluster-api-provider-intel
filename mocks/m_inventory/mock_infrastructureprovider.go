// Code generated by mockery v2.53.4. DO NOT EDIT.

package m_inventory

import (
	inventory "github.com/open-edge-platform/cluster-api-provider-intel/pkg/inventory"
	mock "github.com/stretchr/testify/mock"
)

// MockInfrastructureProvider is an autogenerated mock type for the InfrastructureProvider type
type MockInfrastructureProvider struct {
	mock.Mock
}

type MockInfrastructureProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInfrastructureProvider) EXPECT() *MockInfrastructureProvider_Expecter {
	return &MockInfrastructureProvider_Expecter{mock: &_m.Mock}
}

// AddInstanceToWorkload provides a mock function with given fields: in
func (_m *MockInfrastructureProvider) AddInstanceToWorkload(in inventory.AddInstanceToWorkloadInput) inventory.AddInstanceToWorkloadOutput {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for AddInstanceToWorkload")
	}

	var r0 inventory.AddInstanceToWorkloadOutput
	if rf, ok := ret.Get(0).(func(inventory.AddInstanceToWorkloadInput) inventory.AddInstanceToWorkloadOutput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(inventory.AddInstanceToWorkloadOutput)
	}

	return r0
}

// MockInfrastructureProvider_AddInstanceToWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInstanceToWorkload'
type MockInfrastructureProvider_AddInstanceToWorkload_Call struct {
	*mock.Call
}

// AddInstanceToWorkload is a helper method to define mock.On call
//   - in inventory.AddInstanceToWorkloadInput
func (_e *MockInfrastructureProvider_Expecter) AddInstanceToWorkload(in interface{}) *MockInfrastructureProvider_AddInstanceToWorkload_Call {
	return &MockInfrastructureProvider_AddInstanceToWorkload_Call{Call: _e.mock.On("AddInstanceToWorkload", in)}
}

func (_c *MockInfrastructureProvider_AddInstanceToWorkload_Call) Run(run func(in inventory.AddInstanceToWorkloadInput)) *MockInfrastructureProvider_AddInstanceToWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventory.AddInstanceToWorkloadInput))
	})
	return _c
}

func (_c *MockInfrastructureProvider_AddInstanceToWorkload_Call) Return(_a0 inventory.AddInstanceToWorkloadOutput) *MockInfrastructureProvider_AddInstanceToWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfrastructureProvider_AddInstanceToWorkload_Call) RunAndReturn(run func(inventory.AddInstanceToWorkloadInput) inventory.AddInstanceToWorkloadOutput) *MockInfrastructureProvider_AddInstanceToWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkload provides a mock function with given fields: in
func (_m *MockInfrastructureProvider) CreateWorkload(in inventory.CreateWorkloadInput) inventory.CreateWorkloadOutput {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkload")
	}

	var r0 inventory.CreateWorkloadOutput
	if rf, ok := ret.Get(0).(func(inventory.CreateWorkloadInput) inventory.CreateWorkloadOutput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(inventory.CreateWorkloadOutput)
	}

	return r0
}

// MockInfrastructureProvider_CreateWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkload'
type MockInfrastructureProvider_CreateWorkload_Call struct {
	*mock.Call
}

// CreateWorkload is a helper method to define mock.On call
//   - in inventory.CreateWorkloadInput
func (_e *MockInfrastructureProvider_Expecter) CreateWorkload(in interface{}) *MockInfrastructureProvider_CreateWorkload_Call {
	return &MockInfrastructureProvider_CreateWorkload_Call{Call: _e.mock.On("CreateWorkload", in)}
}

func (_c *MockInfrastructureProvider_CreateWorkload_Call) Run(run func(in inventory.CreateWorkloadInput)) *MockInfrastructureProvider_CreateWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventory.CreateWorkloadInput))
	})
	return _c
}

func (_c *MockInfrastructureProvider_CreateWorkload_Call) Return(_a0 inventory.CreateWorkloadOutput) *MockInfrastructureProvider_CreateWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfrastructureProvider_CreateWorkload_Call) RunAndReturn(run func(inventory.CreateWorkloadInput) inventory.CreateWorkloadOutput) *MockInfrastructureProvider_CreateWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// DeauthorizeHost provides a mock function with given fields: in
func (_m *MockInfrastructureProvider) DeauthorizeHost(in inventory.DeauthorizeHostInput) inventory.DeauthorizeHostOutput {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for DeauthorizeHost")
	}

	var r0 inventory.DeauthorizeHostOutput
	if rf, ok := ret.Get(0).(func(inventory.DeauthorizeHostInput) inventory.DeauthorizeHostOutput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(inventory.DeauthorizeHostOutput)
	}

	return r0
}

// MockInfrastructureProvider_DeauthorizeHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeauthorizeHost'
type MockInfrastructureProvider_DeauthorizeHost_Call struct {
	*mock.Call
}

// DeauthorizeHost is a helper method to define mock.On call
//   - in inventory.DeauthorizeHostInput
func (_e *MockInfrastructureProvider_Expecter) DeauthorizeHost(in interface{}) *MockInfrastructureProvider_DeauthorizeHost_Call {
	return &MockInfrastructureProvider_DeauthorizeHost_Call{Call: _e.mock.On("DeauthorizeHost", in)}
}

func (_c *MockInfrastructureProvider_DeauthorizeHost_Call) Run(run func(in inventory.DeauthorizeHostInput)) *MockInfrastructureProvider_DeauthorizeHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventory.DeauthorizeHostInput))
	})
	return _c
}

func (_c *MockInfrastructureProvider_DeauthorizeHost_Call) Return(_a0 inventory.DeauthorizeHostOutput) *MockInfrastructureProvider_DeauthorizeHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfrastructureProvider_DeauthorizeHost_Call) RunAndReturn(run func(inventory.DeauthorizeHostInput) inventory.DeauthorizeHostOutput) *MockInfrastructureProvider_DeauthorizeHost_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstanceFromWorkload provides a mock function with given fields: in
func (_m *MockInfrastructureProvider) DeleteInstanceFromWorkload(in inventory.DeleteInstanceFromWorkloadInput) inventory.DeleteInstanceFromWorkloadOutput {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceFromWorkload")
	}

	var r0 inventory.DeleteInstanceFromWorkloadOutput
	if rf, ok := ret.Get(0).(func(inventory.DeleteInstanceFromWorkloadInput) inventory.DeleteInstanceFromWorkloadOutput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(inventory.DeleteInstanceFromWorkloadOutput)
	}

	return r0
}

// MockInfrastructureProvider_DeleteInstanceFromWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstanceFromWorkload'
type MockInfrastructureProvider_DeleteInstanceFromWorkload_Call struct {
	*mock.Call
}

// DeleteInstanceFromWorkload is a helper method to define mock.On call
//   - in inventory.DeleteInstanceFromWorkloadInput
func (_e *MockInfrastructureProvider_Expecter) DeleteInstanceFromWorkload(in interface{}) *MockInfrastructureProvider_DeleteInstanceFromWorkload_Call {
	return &MockInfrastructureProvider_DeleteInstanceFromWorkload_Call{Call: _e.mock.On("DeleteInstanceFromWorkload", in)}
}

func (_c *MockInfrastructureProvider_DeleteInstanceFromWorkload_Call) Run(run func(in inventory.DeleteInstanceFromWorkloadInput)) *MockInfrastructureProvider_DeleteInstanceFromWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventory.DeleteInstanceFromWorkloadInput))
	})
	return _c
}

func (_c *MockInfrastructureProvider_DeleteInstanceFromWorkload_Call) Return(_a0 inventory.DeleteInstanceFromWorkloadOutput) *MockInfrastructureProvider_DeleteInstanceFromWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfrastructureProvider_DeleteInstanceFromWorkload_Call) RunAndReturn(run func(inventory.DeleteInstanceFromWorkloadInput) inventory.DeleteInstanceFromWorkloadOutput) *MockInfrastructureProvider_DeleteInstanceFromWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkload provides a mock function with given fields: in
func (_m *MockInfrastructureProvider) DeleteWorkload(in inventory.DeleteWorkloadInput) inventory.DeleteWorkloadOutput {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkload")
	}

	var r0 inventory.DeleteWorkloadOutput
	if rf, ok := ret.Get(0).(func(inventory.DeleteWorkloadInput) inventory.DeleteWorkloadOutput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(inventory.DeleteWorkloadOutput)
	}

	return r0
}

// MockInfrastructureProvider_DeleteWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkload'
type MockInfrastructureProvider_DeleteWorkload_Call struct {
	*mock.Call
}

// DeleteWorkload is a helper method to define mock.On call
//   - in inventory.DeleteWorkloadInput
func (_e *MockInfrastructureProvider_Expecter) DeleteWorkload(in interface{}) *MockInfrastructureProvider_DeleteWorkload_Call {
	return &MockInfrastructureProvider_DeleteWorkload_Call{Call: _e.mock.On("DeleteWorkload", in)}
}

func (_c *MockInfrastructureProvider_DeleteWorkload_Call) Run(run func(in inventory.DeleteWorkloadInput)) *MockInfrastructureProvider_DeleteWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventory.DeleteWorkloadInput))
	})
	return _c
}

func (_c *MockInfrastructureProvider_DeleteWorkload_Call) Return(_a0 inventory.DeleteWorkloadOutput) *MockInfrastructureProvider_DeleteWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfrastructureProvider_DeleteWorkload_Call) RunAndReturn(run func(inventory.DeleteWorkloadInput) inventory.DeleteWorkloadOutput) *MockInfrastructureProvider_DeleteWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceByMachineId provides a mock function with given fields: in
func (_m *MockInfrastructureProvider) GetInstanceByMachineId(in inventory.GetInstanceByMachineIdInput) inventory.GetInstanceByMachineIdOutput {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceByMachineId")
	}

	var r0 inventory.GetInstanceByMachineIdOutput
	if rf, ok := ret.Get(0).(func(inventory.GetInstanceByMachineIdInput) inventory.GetInstanceByMachineIdOutput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(inventory.GetInstanceByMachineIdOutput)
	}

	return r0
}

// MockInfrastructureProvider_GetInstanceByMachineId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceByMachineId'
type MockInfrastructureProvider_GetInstanceByMachineId_Call struct {
	*mock.Call
}

// GetInstanceByMachineId is a helper method to define mock.On call
//   - in inventory.GetInstanceByMachineIdInput
func (_e *MockInfrastructureProvider_Expecter) GetInstanceByMachineId(in interface{}) *MockInfrastructureProvider_GetInstanceByMachineId_Call {
	return &MockInfrastructureProvider_GetInstanceByMachineId_Call{Call: _e.mock.On("GetInstanceByMachineId", in)}
}

func (_c *MockInfrastructureProvider_GetInstanceByMachineId_Call) Run(run func(in inventory.GetInstanceByMachineIdInput)) *MockInfrastructureProvider_GetInstanceByMachineId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventory.GetInstanceByMachineIdInput))
	})
	return _c
}

func (_c *MockInfrastructureProvider_GetInstanceByMachineId_Call) Return(_a0 inventory.GetInstanceByMachineIdOutput) *MockInfrastructureProvider_GetInstanceByMachineId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfrastructureProvider_GetInstanceByMachineId_Call) RunAndReturn(run func(inventory.GetInstanceByMachineIdInput) inventory.GetInstanceByMachineIdOutput) *MockInfrastructureProvider_GetInstanceByMachineId_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkload provides a mock function with given fields: in
func (_m *MockInfrastructureProvider) GetWorkload(in inventory.GetWorkloadInput) inventory.GetWorkloadOutput {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkload")
	}

	var r0 inventory.GetWorkloadOutput
	if rf, ok := ret.Get(0).(func(inventory.GetWorkloadInput) inventory.GetWorkloadOutput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(inventory.GetWorkloadOutput)
	}

	return r0
}

// MockInfrastructureProvider_GetWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkload'
type MockInfrastructureProvider_GetWorkload_Call struct {
	*mock.Call
}

// GetWorkload is a helper method to define mock.On call
//   - in inventory.GetWorkloadInput
func (_e *MockInfrastructureProvider_Expecter) GetWorkload(in interface{}) *MockInfrastructureProvider_GetWorkload_Call {
	return &MockInfrastructureProvider_GetWorkload_Call{Call: _e.mock.On("GetWorkload", in)}
}

func (_c *MockInfrastructureProvider_GetWorkload_Call) Run(run func(in inventory.GetWorkloadInput)) *MockInfrastructureProvider_GetWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventory.GetWorkloadInput))
	})
	return _c
}

func (_c *MockInfrastructureProvider_GetWorkload_Call) Return(_a0 inventory.GetWorkloadOutput) *MockInfrastructureProvider_GetWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfrastructureProvider_GetWorkload_Call) RunAndReturn(run func(inventory.GetWorkloadInput) inventory.GetWorkloadOutput) *MockInfrastructureProvider_GetWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInfrastructureProvider creates a new instance of MockInfrastructureProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInfrastructureProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInfrastructureProvider {
	mock := &MockInfrastructureProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
